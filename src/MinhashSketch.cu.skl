#include "MinhashSketch_dev.cuh"
#include <cstdint>
#include "SpookyV2_d.h"
#include <cub/cub.cuh>

// turn base to int
__device__
int base2int(char base) {
    switch (base) {
        case 'A':
            return 0;
        case 'C':
            return 1;
        case 'G':
            return 2;
        case 'T':
            return 3;
        default:
            return -1;
    }
}

// get hash for each kmerm input is the pointer to the start char of the 
// kmer and k is the length
// involves 2 steps: 1. char to int string (2bit code for each base)
// 2. Hash each int
__device__
uint64_t GetHash(char* inputItem, int k, int hash_b){
    // turn acsII kmer to int
    uint64_t kmer_int = 0;
    uint64_t kmer_hash = 0;
    char* base_p;
    for (int i = 0 ; i < k ; i++) {
        base_p = inputItem + i;
        kmer_int = (kmer_int << 2) % ((uint64_t) 1 << (2 * k)) + base2int(* base_p);
    }
    kmer_hash =  SpookyV2_d::Hash64(kmer_int, k*2/8 +1, hash_b);
    return kmer_hash;
}


__device__
void MinhashSketch_dev::
BlockGetSketch::run(const char* & inputItem, InstTagT nodeIdx)
{   
    
    // Param m : {unsigned int};
    // Param k : {unsigned int};
    // NodeParam BlockGetSketch::hash_b : {unsigned int};
    int m = getParam()->m;
    int BLOCK_THREADS = getParam()->BLOCK_THREADS;
    int ITEMS_PER_THREAD = getParam()->ITEMS_PER_THREAD;
    typedef cub::BlockStore<uint64_t, BLOCK_THREADS, ITEMS_PER_THREAD, cub::BLOCK_STORE_WARP_TRANSPOSE> BlockStoreR;
    typedef cub::BlockRadixSort <uint64_t, BLOCK_THREADS, ITEMS_PER_THREAD> BlockRadixSort;
    typedef cub::BlockDiscontinuity<uint64_t, BLOCK_THREADS> BlockDiscontinuity;
    typedef cub::BlockScan<int, BLOCK_THREADS> BlockScan;





    push(hash, nodeIdx); // eqv to "push(v, nodeIdx, Out::accept);"
   
}

__device__
void MinhashSketch_dev::
MergeSketch::init()
{

}

__device__
void MinhashSketch_dev::
MergeSketch::run(const uint64_t& inputItem, InstTagT nodeIdx)
{
   
}


// The cleanup() function of this module, which is called when the input is 
// all consumed,  will then copy tmpSketch to a device array allocated by 
// the host, for  which you pass in a pointer as a parameter.
__device__
void MinhashSketch_dev::
MergeSketch::cleanup()
{
// NodeParam MergeSketch::resultSketchStorage : {uint64_t *};

}

